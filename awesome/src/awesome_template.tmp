%%%===================================================================
%%% @doc
%%%
%%% ```
%%% {ok, Template} = file:read_file("path_to_file").
%%% Environment = [{'Name', merl:term(atom)}
%%%               ,{'Version', merl:term(1)}
%%%               ,{'CreatedAt', merl:term(erlang:system_time()}
%%%               ,{'UpdatedAt', merl:term(erlang:system_time()}
%%%               ,{'FunctionName', merl:term("name")}
%%%               ,{'FunctionPath', merl:term("path")}
%%%               ,{'FunctionTemplate', merl:term(<<"template">>)
%%%               ].
%%% Quoted = merl:qquote(Template, Environment).
%%% Compile = merl:compile_and_load(Quoted, Environment).
%%% at
%%% '''
%%%
%%% @end
%%%===================================================================
-module('@Name').
-compile({no_auto_import,[apply/2]}).
-export([name/0, path/0, template/0]).
-export([print/0, print/1, print/2]).
-export([apply/1, apply/2]).
-vsn('@Version').
-created_at('@CreatedAt').
-updated_at('@UpdatedAt').

%%--------------------------------------------------------------------
%% @doc return the name of the template
%% @end
%%--------------------------------------------------------------------
name() -> '@FunctionName'.

%%--------------------------------------------------------------------
%% @doc return the path of the template
%% @end
%%--------------------------------------------------------------------
path() -> '@FunctionPath'.

%%--------------------------------------------------------------------
%% @doc return the content of the template
%% @end
%%--------------------------------------------------------------------
template() -> '@FunctionTemplate'.

%%--------------------------------------------------------------------
%% @doc print the content of the template without variable mapping
%% @end
%%--------------------------------------------------------------------
-spec print() -> ok.
print() -> 
    io:format("~s~n", [template()]).

%%--------------------------------------------------------------------
%% @doc apply context map to template without options.
%% @end
%%--------------------------------------------------------------------
-spec print(Context) -> Return when
      Context :: map(),
      Return :: ok.
print(Context) -> 
    print(Context, []).

%%--------------------------------------------------------------------
%% @doc print the context applied to the template with options
%% @end
%%--------------------------------------------------------------------
-spec print(Context, Opts) -> Return when
      Context :: map(),
      Opts :: proplists:proplists(),
      Return :: ok.
print(Context, Opts) ->
  {ok, Apply} = apply(Context, Opts),
  io:format("~s~n", [Apply]).

%%--------------------------------------------------------------------
%% @doc application a context to template
%% @end
%%--------------------------------------------------------------------
-spec apply(Context) -> Return when
      Context :: map(),
      Return :: {ok, binary()} | {error, term()}.
apply(Context) -> 
    apply(Context, []).

%%--------------------------------------------------------------------
%% @doc apply a context with options to the template
%% @end
%%--------------------------------------------------------------------
-spec apply(Context, Opts) -> Return when
      Context :: map(),
      Opts :: proplists:proplists(),
      Return :: {ok, binary()} | {error, term()}.
apply(Context, Opts) ->
    try
        Template = template(),
        Result = bbmustache:render(Context, Context, Opts),
        {ok, Result}
    catch
        _:Reason -> {error, Reason}
    end.
